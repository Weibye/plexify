name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: plexify-linux-amd64
            cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: plexify-linux-arm64
            cross: true
          
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: plexify-windows-amd64.exe
            cross: false
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            name: plexify-macos-amd64
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            name: plexify-macos-arm64
            cross: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.cross
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ matrix.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.target }}-cargo-
          ${{ matrix.os }}-cargo-

    - name: Build binary
      run: |
        if [ "${{ matrix.cross }}" = "true" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi
      shell: bash

    - name: Prepare binary
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/${{ matrix.target }}/release/plexify.exe ${{ matrix.name }}
        else
          cp target/${{ matrix.target }}/release/plexify ${{ matrix.name }}
        fi
        
        # Create checksum
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          certutil -hashfile ${{ matrix.name }} SHA256 > ${{ matrix.name }}.sha256
        else
          sha256sum ${{ matrix.name }} > ${{ matrix.name }}.sha256
        fi
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: |
          ${{ matrix.name }}
          ${{ matrix.name }}.sha256

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -type f -exec cp {} release-assets/ \;
        ls -la release-assets/

    - name: Get tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Release ${{ steps.tag.outputs.tag }}
        draft: false
        prerelease: ${{ contains(steps.tag.outputs.tag, '-') }}
        generate_release_notes: true
        files: release-assets/*
        body: |
          ## Installation

          ### Pre-built Binaries

          Download the appropriate binary for your system:

          - **Linux (x86_64)**: `plexify-linux-amd64`
          - **Linux (ARM64)**: `plexify-linux-arm64`
          - **Windows (x86_64)**: `plexify-windows-amd64.exe`
          - **macOS (Intel)**: `plexify-macos-amd64`
          - **macOS (Apple Silicon)**: `plexify-macos-arm64`

          ### Quick Start

          1. Download the binary for your platform
          2. Verify the checksum using the `.sha256` file
          3. Make the binary executable (Linux/macOS): `chmod +x plexify-*`
          4. Install FFmpeg on your system
          5. Run: `./plexify-* scan /path/to/media`

          ### Verification

          Each binary includes a SHA256 checksum file. Verify your download:

          ```bash
          # Linux/macOS
          sha256sum -c plexify-*.sha256
          
          # Windows
          certutil -hashfile plexify-windows-amd64.exe SHA256
          ```

          See the [README](https://github.com/Weibye/plexify/blob/main/README.md) for detailed usage instructions.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}