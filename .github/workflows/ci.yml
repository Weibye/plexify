name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    strategy:
      matrix:
        rust: [stable]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ matrix.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ matrix.os }}-cargo-${{ matrix.rust }}-
          ${{ matrix.os }}-cargo-
          
    - name: Build
      run: cargo build --verbose
      
    - name: Run tests
      run: cargo test --verbose
      
  fmt:
    name: Format
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
        
    - name: Check formatting
      run: cargo fmt --all -- --check
      
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
        
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ubuntu-latest-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-stable-
          ubuntu-latest-cargo-
          
    - name: Run clippy
      run: cargo clippy --all-targets --all-features
      
  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Security audit
      uses: rustsec/audit-check@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
  check:
    name: All Checks
    runs-on: ubuntu-latest
    needs: [test, fmt, clippy, security_audit]
    if: always()
    
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.test.result }}" == "success" && 
              "${{ needs.fmt.result }}" == "success" && 
              "${{ needs.clippy.result }}" == "success" && 
              "${{ needs.security_audit.result }}" == "success" ]]; then
          echo "✅ All checks passed!"
        else
          echo "❌ Some checks failed:"
          echo "Test: ${{ needs.test.result }}"
          echo "Format: ${{ needs.fmt.result }}"
          echo "Clippy: ${{ needs.clippy.result }}"
          echo "Security: ${{ needs.security_audit.result }}"
          exit 1
        fi